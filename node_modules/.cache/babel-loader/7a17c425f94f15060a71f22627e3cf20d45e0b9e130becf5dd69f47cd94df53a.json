{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\todo\\\\src\\\\components\\\\ImageCollectionApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { Button, Container, Grid, TextField, Typography } from '@mui/material';\nimport JSZip from 'jszip';\n\n// Define the API endpoints for Pixabay and Pexels\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PIXABAY_API = 'https://pixabay.com/api/';\n\n// Define the base hierarchy of image tags as provided JSON\nconst baseTags = {\n  categories: ['cats', 'dogs', 'animals']\n  // Add more categories and tags as needed\n};\n\n// Function to fetch images from the selected API\nconst fetchImages = async (query, api) => {\n  const response = await fetch(`${api}?query=${query}`, {\n    headers: {\n      Authorization: 'YOUR_API_KEY' // Replace with your actual API key\n    }\n  });\n  const data = await response.json();\n  return data;\n};\nconst ImageCollectionApp = () => {\n  _s();\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [selectedImages, setSelectedImages] = useState([]);\n  const [zipFile, setZipFile] = useState(null);\n\n  // Fetch images based on the selected category\n  const {\n    data: imagesData,\n    status\n  } = useQuery(['images', selectedCategory], () => fetchImages(selectedCategory, PIXABAY_API));\n\n  // Function to handle image selection\n  const handleImageSelect = image => {\n    setSelectedImages([...selectedImages, image]);\n  };\n\n  // Function to handle saving the results to a ZIP file\n  const handleSaveResults = () => {\n    // Implement logic to convert data and create a ZIP file\n    // This is a simplified example, you may need to adjust it based on your requirements\n    const contentMetadata = selectedImages.map((image, index) => ({\n      id: `image_${index}`,\n      labels: ['cat'],\n      // Assuming 'cat' is always a label\n      weight: 1,\n      url: image.url,\n      author: image.author,\n      tags: image.tags\n    }));\n    const zip = new JSZip();\n    zip.file('content.json', JSON.stringify(contentMetadata));\n    const imagesFolder = zip.folder('images');\n    selectedImages.forEach((image, index) => {\n      imagesFolder.file(`image_${index}.png`, image.imageData, {\n        base64: true\n      });\n    });\n    zip.generateAsync({\n      type: 'blob'\n    }).then(blob => {\n      setZipFile(blob);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Image Collection App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this), status === 'loading' && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading images...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 30\n    }, this), status === 'error' && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error loading images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 28\n    }, this), status === 'success' && /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Select Category\",\n          select: true,\n          fullWidth: true,\n          value: selectedCategory,\n          onChange: e => setSelectedCategory(e.target.value),\n          children: baseTags.categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: category,\n            children: category\n          }, category, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: [\"Select Images for \", selectedCategory]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: imagesData.hits.map(image => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: image.webformatURL,\n              alt: image.tags,\n              style: {\n                width: '150px',\n                height: '150px',\n                objectFit: 'cover'\n              },\n              onClick: () => handleImageSelect(image)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this)\n          }, image.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleSaveResults,\n          children: \"Save Results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), zipFile && /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        href: URL.createObjectURL(zipFile),\n        download: \"image_collection.zip\",\n        children: \"Download ZIP File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageCollectionApp, \"7h1RO7hFrkTYMDMRTSuTpZNURGw=\", false, function () {\n  return [useQuery];\n});\n_c = ImageCollectionApp;\nexport default ImageCollectionApp;\nvar _c;\n$RefreshReg$(_c, \"ImageCollectionApp\");","map":{"version":3,"names":["React","useState","useQuery","Button","Container","Grid","TextField","Typography","JSZip","jsxDEV","_jsxDEV","PIXABAY_API","baseTags","categories","fetchImages","query","api","response","fetch","headers","Authorization","data","json","ImageCollectionApp","_s","selectedCategory","setSelectedCategory","selectedImages","setSelectedImages","zipFile","setZipFile","imagesData","status","handleImageSelect","image","handleSaveResults","contentMetadata","map","index","id","labels","weight","url","author","tags","zip","file","JSON","stringify","imagesFolder","folder","forEach","imageData","base64","generateAsync","type","then","blob","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","item","xs","label","select","fullWidth","value","onChange","e","target","category","hits","src","webformatURL","alt","style","width","height","objectFit","onClick","color","href","URL","createObjectURL","download","_c","$RefreshReg$"],"sources":["D:/React/todo/src/components/ImageCollectionApp.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useQuery } from 'react-query';\r\nimport { Button, Container, Grid, TextField, Typography } from '@mui/material';\r\nimport JSZip from 'jszip';\r\n\r\n\r\n\r\n// Define the API endpoints for Pixabay and Pexels\r\nconst PIXABAY_API = 'https://pixabay.com/api/';\r\n\r\n\r\n// Define the base hierarchy of image tags as provided JSON\r\nconst baseTags = {\r\n  categories: ['cats', 'dogs', 'animals'],\r\n  // Add more categories and tags as needed\r\n};\r\n\r\n// Function to fetch images from the selected API\r\nconst fetchImages = async (query, api) => {\r\n  const response = await fetch(`${api}?query=${query}`, {\r\n    headers: {\r\n      Authorization: 'YOUR_API_KEY', // Replace with your actual API key\r\n    },\r\n  });\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n\r\n\r\nconst ImageCollectionApp = () => {\r\n\r\n\r\n    const [selectedCategory, setSelectedCategory] = useState('');\r\n    const [selectedImages, setSelectedImages] = useState([]);\r\n    const [zipFile, setZipFile] = useState(null);\r\n  \r\n    // Fetch images based on the selected category\r\n    const { data: imagesData, status } = useQuery(['images', selectedCategory], () => fetchImages(selectedCategory, PIXABAY_API));\r\n  \r\n    // Function to handle image selection\r\n    const handleImageSelect = (image) => {\r\n      setSelectedImages([...selectedImages, image]);\r\n    };\r\n  \r\n    // Function to handle saving the results to a ZIP file\r\n    const handleSaveResults = () => {\r\n      // Implement logic to convert data and create a ZIP file\r\n      // This is a simplified example, you may need to adjust it based on your requirements\r\n      const contentMetadata = selectedImages.map((image, index) => ({\r\n        id: `image_${index}`,\r\n        labels: ['cat'], // Assuming 'cat' is always a label\r\n        weight: 1,\r\n        url: image.url,\r\n        author: image.author,\r\n        tags: image.tags,\r\n      }));\r\n  \r\n      const zip = new JSZip();\r\n      zip.file('content.json', JSON.stringify(contentMetadata));\r\n  \r\n      const imagesFolder = zip.folder('images');\r\n      selectedImages.forEach((image, index) => {\r\n        imagesFolder.file(`image_${index}.png`, image.imageData, { base64: true });\r\n      });\r\n  \r\n      zip.generateAsync({ type: 'blob' }).then((blob) => {\r\n        setZipFile(blob);\r\n      });\r\n    };\r\n\r\n\r\n  return (\r\n    <Container>\r\n    <Typography variant=\"h4\" gutterBottom>\r\n      Image Collection App\r\n    </Typography>\r\n    {status === 'loading' && <p>Loading images...</p>}\r\n    {status === 'error' && <p>Error loading images</p>}\r\n    {status === 'success' && (\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            label=\"Select Category\"\r\n            select\r\n            fullWidth\r\n            value={selectedCategory}\r\n            onChange={(e) => setSelectedCategory(e.target.value)}\r\n          >\r\n            {baseTags.categories.map((category) => (\r\n              <option key={category} value={category}>\r\n                {category}\r\n              </option>\r\n            ))}\r\n          </TextField>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Select Images for {selectedCategory}\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            {imagesData.hits.map((image) => (\r\n              <Grid item key={image.id}>\r\n                <img\r\n                  src={image.webformatURL}\r\n                  alt={image.tags}\r\n                  style={{ width: '150px', height: '150px', objectFit: 'cover' }}\r\n                  onClick={() => handleImageSelect(image)}\r\n                />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={handleSaveResults}>\r\n            Save Results\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    )}\r\n    {zipFile && (\r\n      <Grid item xs={12}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          href={URL.createObjectURL(zipFile)}\r\n          download=\"image_collection.zip\"\r\n        >\r\n          Download ZIP File\r\n        </Button>\r\n      </Grid>\r\n    )}\r\n  </Container>\r\n  )\r\n}\r\n\r\nexport default ImageCollectionApp"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}